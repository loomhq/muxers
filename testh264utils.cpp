
#include "H264Utils.h"

#include "gtest/gtest.h"

namespace {

// Contains SPS, PPS, SEI, IDR
const uint8_t kVideoToolsH264Frame1[] = {
  0x00, 0x00, 0x00, 0x01, 0x27, 0x4d, 0x40, 0x0b, 0xa9, 0x18, 0x40, 0xaf, 0x2f, 0x80, 0xb7, 0x02,
  0x02, 0x02, 0x30, 0xad, 0x7b, 0xdf, 0x01, 0x00, 0x00, 0x00, 0x01, 0x28, 0xfe, 0x09, 0x88, 0x00,
  0x00, 0x00, 0x01, 0x06, 0x00, 0x07, 0x81, 0xc9, 0xc3, 0x80, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00,
  0x00, 0x01, 0x06, 0x05, 0x11, 0x03, 0x87, 0xf4, 0x4e, 0xcd, 0x0a, 0x4b, 0xdc, 0xa1, 0x94, 0x3a,
  0xc3, 0xd4, 0x9b, 0x17, 0x1f, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x25, 0xb8, 0x20, 0x20, 0xbf,
  0xeb, 0x08, 0x6a, 0x0c, 0xff, 0x03, 0xce, 0x9b, 0xc0, 0x7d, 0xa8, 0xab, 0x83, 0x89, 0x47, 0xc5,
  0x3a, 0xe5, 0x01, 0x95, 0xdf, 0x7e, 0x23, 0xa3, 0x61, 0x2b, 0xc9, 0xf2, 0xfc, 0x86, 0xad, 0x6f,
  0xba, 0x74, 0xdb, 0x3c, 0x4e, 0xc4, 0x0c, 0x5c, 0x99, 0xfe, 0x54, 0xf6, 0xce, 0x4c, 0x42, 0x6a,
  0x28, 0x2c, 0x00, 0x33, 0x78, 0x20, 0x18, 0x00, 0x00, 0x00, 0x01, 0x25, 0x05, 0x2e, 0x08, 0x08,
  0x2f, 0xeb, 0x08, 0x6a, 0x0c, 0xff, 0x03, 0xce, 0x9b, 0xc0, 0x7d, 0xa8, 0xab, 0x83, 0x89, 0x47,
  0xc5, 0x3a, 0xe5, 0x01, 0x95, 0xdf, 0x7e, 0x23, 0xa3, 0x61, 0x2b, 0xc9, 0xf2, 0xfc, 0x86, 0xad,
  0x6f, 0xba, 0x74, 0xdb, 0x3c, 0x4e, 0xc4, 0x0c, 0x5c, 0x99, 0xfe, 0x54, 0xf6, 0xce, 0x4c, 0x42,
  0x6a, 0x28, 0x2c, 0x00, 0x33, 0x78, 0x20, 0x18};

// Contains SEI + non IDR
const uint8_t kVideoToolsH264Frame2[] = {
  0x00, 0x00, 0x00, 0x01, 0x06, 0x05, 0x11, 0x03, 0x87, 0xf4, 0x4e, 0xcd, 0x0a, 0x4b, 0xdc, 0xa1,
  0x94, 0x3a, 0xc3, 0xd4, 0x9b, 0x17, 0x1f, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x21, 0xe1, 0x05,
  0x13, 0xff, 0x00, 0x13, 0x10, 0x00, 0x00, 0x00, 0x01, 0x21, 0x05, 0x38, 0x41, 0x44, 0xff, 0x00,
  0x13, 0x10};

TEST(H264UtilsTest, shouldNotCrash_withTooShortNals) {
  ASSERT_FALSE(H264Utils::hasAnnexBNalOfType(nullptr, 0, {H264Utils::NalType::SliceIdrPicture} ));

  std::vector<uint8_t> data;
  data = {0x00};
  ASSERT_FALSE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));

  data = {0x00, 0x00};
  ASSERT_FALSE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));

  data = {0x00, 0x00, 0x00};
  ASSERT_FALSE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));
}

TEST(H264UtilsTest, shouldNotCrash_withMaliciousData) {
  std::vector<uint8_t> data;

  // 3 bytes NAL start code (and nothing else)
  data = {0x00, 0x00, 0x01};
  ASSERT_FALSE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));

  // 4 bytes NAL start code (and nothing else)
  data = {0x00, 0x00, 0x00, 0x01};
  ASSERT_FALSE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));

  // Zeros + 4 byte start code (and nothing else)
  data = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01};
  ASSERT_FALSE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));
}

TEST(H264UtilsTest, shouldFindNal_withLongHeadingZeros) {
  std::vector<uint8_t> data;

  data = {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05};
  ASSERT_TRUE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));
}

TEST(H264UtilsTest, shouldFindNal_withLongZerosIntheMiddle) {
  std::vector<uint8_t> data;

  data = {0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05};
  ASSERT_TRUE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));
}

TEST(H264UtilsTest, returnsTrue_IfOneNalIsFound) {
  std::vector<uint8_t> data;

  data = {0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x01, 0x05};
  ASSERT_TRUE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));
}

TEST(H264UtilsTest, returnsFalse_IfNoNalIsFound) {
  std::vector<uint8_t> data;

  data = {0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x01, 0x04};
  ASSERT_FALSE(H264Utils::hasAnnexBNalOfType(data.data(), data.size(), {H264Utils::NalType::SliceIdrPicture}));
}

TEST(H264UtilsTest, shouldFindNal_inRealH264Frame) {
  ASSERT_TRUE(H264Utils::hasAnnexBNalOfType(kVideoToolsH264Frame1, sizeof(kVideoToolsH264Frame1), {H264Utils::NalType::SequenceParameterSet}));
  ASSERT_TRUE(H264Utils::hasAnnexBNalOfType(kVideoToolsH264Frame1, sizeof(kVideoToolsH264Frame1), {H264Utils::NalType::SliceIdrPicture}));

}

TEST(H264UtilsTest, shouldNotFindIntra_inRealInterFrame) {
  ASSERT_FALSE(H264Utils::hasAnnexBNalOfType(
    kVideoToolsH264Frame2,
    sizeof(kVideoToolsH264Frame2),
    { H264Utils::NalType::SliceIdrPicture, H264Utils::NalType::SequenceParameterSet}
  ));
}

}  // namespace
